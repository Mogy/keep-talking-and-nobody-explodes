{"version":3,"sources":["App.tsx","serviceWorker.ts","components/parts/menu/header/index.tsx","components/parts/menu/item/index.tsx","components/parts/menu/index.tsx","index.tsx"],"names":["Home","About","Users","App","to","path","Boolean","window","location","hostname","match","Header","props","AppBar","position","Toolbar","IconButton","onClick","edge","aria-label","Typography","variant","withRouter","history","targetUrl","push","scrollTo","title","MenuBar","useState","open","setOpen","Fragment","Drawer","onClose","MenuList","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"uRAoCMA,EAAiB,WACrB,OAAO,qCAGHC,EAAkB,WACtB,OAAO,sCAGHC,EAAkB,WACtB,OAAO,sCAGMC,EA7CO,WACpB,OACE,kBAAC,IAAD,KACE,6BACE,6BACE,4BACE,4BACE,kBAAC,IAAD,CAAMC,GAAG,KAAT,SAEF,4BACE,kBAAC,IAAD,CAAMA,GAAG,UAAT,UAEF,4BACE,kBAAC,IAAD,CAAMA,GAAG,UAAT,YAIN,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,KAAK,UACV,kBAAC,EAAD,OAEF,kBAAC,IAAD,CAAOA,KAAK,UACV,kBAAC,EAAD,OAEF,kBAAC,IAAD,CAAOA,KAAK,KACV,kBAAC,EAAD,WChBQC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,6ECCSC,EAXkB,SAAAC,GAAK,OACpC,kBAACC,EAAA,EAAD,CAAQC,SAAS,UACf,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAYC,QAASL,EAAMK,QAASC,KAAK,QAAQC,aAAW,QAC1D,kBAAC,IAAD,OAEF,kBAACC,EAAA,EAAD,CAAYC,QAAQ,MAApB,mF,QCKSC,eAV0C,SAAAV,GAOvD,OAAO,kBAAC,IAAD,CAAMK,QANM,WAAO,IAChBM,EAAuBX,EAAvBW,QAASC,EAAcZ,EAAdY,UACjBD,EAAQE,KAAKD,GACbjB,OAAOmB,SAAS,EAAG,KAGcd,EAAMe,UCI5BC,EAfC,WAAO,IAAD,EACIC,oBAAS,GADb,mBACbC,EADa,KACPC,EADO,KAGpB,OACE,kBAAC,IAAMC,SAAP,KACE,kBAAC,EAAD,CAAQf,QAAS,kBAAMc,GAAQ,MAC/B,kBAACE,EAAA,EAAD,CAAQH,KAAMA,EAAMI,QAAS,kBAAMH,GAAQ,KACzC,kBAACI,EAAA,EAAD,KACE,kBAAC,EAAD,CAAUR,MAAM,OAAOH,UAAU,cCN3CY,IAASC,OACP,kBAAC,IAAML,SAAP,KACE,kBAAC,EAAD,MACA,kBAAC,EAAD,OAEFM,SAASC,eAAe,SJ+HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.e62fc78f.chunk.js","sourcesContent":["import React from \"react\";\nimport { BrowserRouter, Switch, Route, Link } from \"react-router-dom\";\n\nconst App: React.FC = () => {\n  return (\n    <BrowserRouter>\n      <div>\n        <nav>\n          <ul>\n            <li>\n              <Link to=\"/\">Home</Link>\n            </li>\n            <li>\n              <Link to=\"/about\">About</Link>\n            </li>\n            <li>\n              <Link to=\"/users\">Users</Link>\n            </li>\n          </ul>\n        </nav>\n        <Switch>\n          <Route path=\"/about\">\n            <About />\n          </Route>\n          <Route path=\"/users\">\n            <Users />\n          </Route>\n          <Route path=\"/\">\n            <Home />\n          </Route>\n        </Switch>\n      </div>\n    </BrowserRouter>\n  );\n};\n\nconst Home: React.FC = () => {\n  return <h2>Home</h2>;\n};\n\nconst About: React.FC = () => {\n  return <h2>About</h2>;\n};\n\nconst Users: React.FC = () => {\n  return <h2>Users</h2>;\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport { AppBar, Toolbar, IconButton, Typography } from \"@material-ui/core\";\nimport MenuIcon from \"@material-ui/icons/Menu\";\n\ntype IProps = {\n  onClick: () => void;\n};\n\nconst Header: React.FC<IProps> = props => (\n  <AppBar position=\"static\">\n    <Toolbar>\n      <IconButton onClick={props.onClick} edge=\"start\" aria-label=\"menu\">\n        <MenuIcon />\n      </IconButton>\n      <Typography variant=\"h6\">完全爆弾解除マニュアル (v1: 122)</Typography>\n    </Toolbar>\n  </AppBar>\n);\n\nexport default Header;\n","import React from \"react\";\nimport Item from \"@material-ui/core/MenuItem\";\nimport { RouteComponentProps, withRouter } from \"react-router-dom\";\n\ntype IProps = {\n  title: string;\n  targetUrl: string;\n};\n\nconst MenuItem: React.FC<IProps & RouteComponentProps> = props => {\n  const transition = () => {\n    const { history, targetUrl } = props;\n    history.push(targetUrl);\n    window.scrollTo(0, 0);\n  };\n\n  return <Item onClick={transition}>{props.title}</Item>;\n};\n\nexport default withRouter(MenuItem);\n","import React, { useState } from \"react\";\nimport { Drawer, MenuList } from \"@material-ui/core\";\nimport Header from \"./header\";\nimport MenuItem from \"./item\";\n\nconst MenuBar = () => {\n  const [open, setOpen] = useState(false);\n\n  return (\n    <React.Fragment>\n      <Header onClick={() => setOpen(true)} />\n      <Drawer open={open} onClose={() => setOpen(false)}>\n        <MenuList>\n          <MenuItem title=\"hoge\" targetUrl=\"/hoge\" />\n        </MenuList>\n      </Drawer>\n    </React.Fragment>\n  );\n};\n\nexport default MenuBar;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport MenuBar from \"./components/parts/menu\";\n\nReactDOM.render(\n  <React.Fragment>\n    <MenuBar />\n    <App />\n  </React.Fragment>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}