{"version":3,"sources":["shared/const.tsx","components/parts/menu/header/index.tsx","components/parts/menu/item/index.tsx","components/parts/menu/index.tsx","components/screens/button/index.tsx","components/screens/comp_wires/index.tsx","components/screens/keypads/index.tsx","components/screens/knobs/index.tsx","components/screens/mazes/index.tsx","components/screens/memory/index.tsx","components/screens/morse/index.tsx","components/screens/passwords/index.tsx","components/screens/seq_wires/index.tsx","components/screens/simon/index.tsx","components/screens/who/index.tsx","components/screens/wires/index.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Constants","AppName","Header","props","AppBar","position","Toolbar","IconButton","onClick","edge","aria-label","Typography","variant","withRouter","history","targetUrl","push","window","scrollTo","title","MenuBar","useState","open","setOpen","Fragment","Drawer","onClose","MenuList","Home","App","path","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.24f8d2ab.chunk.js","sourcesContent":["export class Constants {\n    static AppName = \"完全爆弾解除マニュアル (v1: 122)\";\n}","import React from \"react\";\nimport { AppBar, Toolbar, IconButton, Typography } from \"@material-ui/core\";\nimport MenuIcon from \"@material-ui/icons/Menu\";\nimport { Constants } from \"../../../../shared/const\";\n\ntype IProps = {\n  onClick: () => void;\n};\n\nconst Header: React.FC<IProps> = props => (\n  <AppBar position=\"static\">\n    <Toolbar>\n      <IconButton onClick={props.onClick} edge=\"start\" aria-label=\"menu\">\n        <MenuIcon />\n      </IconButton>\n      <Typography variant=\"h6\">{Constants.AppName}</Typography>\n    </Toolbar>\n  </AppBar>\n);\n\nexport default Header;\n","import React from \"react\";\nimport Item from \"@material-ui/core/MenuItem\";\nimport { RouteComponentProps, withRouter } from \"react-router-dom\";\n\ntype IProps = {\n  title: string;\n  targetUrl: string;\n  onClick: () => void;\n};\n\nconst MenuItem: React.FC<IProps & RouteComponentProps> = props => {\n  const transition = () => {\n    const { history, targetUrl, onClick } = props;\n    history.push(targetUrl);\n    window.scrollTo(0, 0);\n    onClick();\n  };\n\n  return <Item onClick={transition}>{props.title}</Item>;\n};\n\nexport default withRouter(MenuItem);\n","import React, { useState } from \"react\";\nimport { Drawer, MenuList } from \"@material-ui/core\";\nimport Header from \"./header\";\nimport MenuItem from \"./item\";\n\nconst MenuBar = () => {\n  const [open, setOpen] = useState(false);\n\n  return (\n    <React.Fragment>\n      <Header onClick={() => setOpen(true)} />\n      <Drawer open={open} onClose={() => setOpen(false)}>\n        <MenuList>\n          <MenuItem title=\"Home\" targetUrl=\"/\" onClick={() => setOpen(false)} />\n          <MenuItem\n            title=\"ワイヤー\"\n            targetUrl=\"/wires\"\n            onClick={() => setOpen(false)}\n          />\n          <MenuItem\n            title=\"ボタン\"\n            targetUrl=\"/button\"\n            onClick={() => setOpen(false)}\n          />\n          <MenuItem\n            title=\"キーパッド\"\n            targetUrl=\"/keypads\"\n            onClick={() => setOpen(false)}\n          />\n          <MenuItem\n            title=\"サイモンゲーム\"\n            targetUrl=\"/simon\"\n            onClick={() => setOpen(false)}\n          />\n          <MenuItem\n            title=\"表比較\"\n            targetUrl=\"/who\"\n            onClick={() => setOpen(false)}\n          />\n          <MenuItem\n            title=\"記憶\"\n            targetUrl=\"/memory\"\n            onClick={() => setOpen(false)}\n          />\n          <MenuItem\n            title=\"モールス信号\"\n            targetUrl=\"/morse\"\n            onClick={() => setOpen(false)}\n          />\n          <MenuItem\n            title=\"複雑ワイヤー\"\n            targetUrl=\"/comp_wires\"\n            onClick={() => setOpen(false)}\n          />\n          <MenuItem\n            title=\"順番ワイヤー\"\n            targetUrl=\"/seq_wires\"\n            onClick={() => setOpen(false)}\n          />\n          <MenuItem\n            title=\"迷路\"\n            targetUrl=\"/mazes\"\n            onClick={() => setOpen(false)}\n          />\n          <MenuItem\n            title=\"パスワード\"\n            targetUrl=\"/passwords\"\n            onClick={() => setOpen(false)}\n          />\n          <MenuItem\n            title=\"ダイアル\"\n            targetUrl=\"/knobs\"\n            onClick={() => setOpen(false)}\n          />\n        </MenuList>\n      </Drawer>\n    </React.Fragment>\n  );\n};\n\nexport default MenuBar;\n","import * as React from \"react\";\nimport { withRouter } from \"react-router-dom\";\n\nconst ButtonScreen: React.FC = () => {\n  return (\n    <React.Fragment>\n      <h2>ボタン</h2>\n    </React.Fragment>\n  );\n};\n\nexport default withRouter(ButtonScreen);\n","import * as React from \"react\";\nimport { withRouter } from \"react-router-dom\";\n\nconst CompWiresScreen: React.FC = () => {\n  return (\n    <React.Fragment>\n      <h2>複雑ワイヤー</h2>\n    </React.Fragment>\n  );\n};\n\nexport default withRouter(CompWiresScreen);\n","import * as React from \"react\";\nimport { withRouter } from \"react-router-dom\";\n\nconst KeyPadsScreen: React.FC = () => {\n  return (\n    <React.Fragment>\n      <h2>キーパッド</h2>\n    </React.Fragment>\n  );\n};\n\nexport default withRouter(KeyPadsScreen);\n","import * as React from \"react\";\nimport { withRouter } from \"react-router-dom\";\n\nconst KnobsScreen: React.FC = () => {\n  return (\n    <React.Fragment>\n      <h2>ダイアル</h2>\n    </React.Fragment>\n  );\n};\n\nexport default withRouter(KnobsScreen);\n","import * as React from \"react\";\nimport { withRouter } from \"react-router-dom\";\n\nconst MazesScreen: React.FC = () => {\n  return (\n    <React.Fragment>\n      <h2>迷路</h2>\n    </React.Fragment>\n  );\n};\n\nexport default withRouter(MazesScreen);\n","import * as React from \"react\";\nimport { withRouter } from \"react-router-dom\";\n\nconst MemoryScreen: React.FC = () => {\n  return (\n    <React.Fragment>\n      <h2>記憶</h2>\n    </React.Fragment>\n  );\n};\n\nexport default withRouter(MemoryScreen);\n","import * as React from \"react\";\nimport { withRouter } from \"react-router-dom\";\n\nconst MorseScreen: React.FC = () => {\n  return (\n    <React.Fragment>\n      <h2>モールス信号</h2>\n    </React.Fragment>\n  );\n};\n\nexport default withRouter(MorseScreen);\n","import * as React from \"react\";\nimport { withRouter } from \"react-router-dom\";\n\nconst PasswordsScreen: React.FC = () => {\n  return (\n    <React.Fragment>\n      <h2>パスワード</h2>\n    </React.Fragment>\n  );\n};\n\nexport default withRouter(PasswordsScreen);\n","import * as React from \"react\";\nimport { withRouter } from \"react-router-dom\";\n\nconst SeqWiresScreen: React.FC = () => {\n  return (\n    <React.Fragment>\n      <h2>順番ワイヤー</h2>\n    </React.Fragment>\n  );\n};\n\nexport default withRouter(SeqWiresScreen);\n","import * as React from \"react\";\nimport { withRouter } from \"react-router-dom\";\n\nconst SimonScreen: React.FC = () => {\n  return (\n    <React.Fragment>\n      <h2>サイモンゲーム</h2>\n    </React.Fragment>\n  );\n};\n\nexport default withRouter(SimonScreen);\n","import * as React from \"react\";\nimport { withRouter } from \"react-router-dom\";\n\nconst WhoScreen: React.FC = () => {\n  return (\n    <React.Fragment>\n      <h2>表比較</h2>\n    </React.Fragment>\n  );\n};\n\nexport default withRouter(WhoScreen);\n","import * as React from \"react\";\nimport { withRouter } from \"react-router-dom\";\n\nconst WiresScreen: React.FC = () => {\n  return (\n    <React.Fragment>\n      <h2>ワイヤー</h2>\n    </React.Fragment>\n  );\n};\n\nexport default withRouter(WiresScreen);\n","import * as React from \"react\";\nimport { BrowserRouter, Switch, Route } from \"react-router-dom\";\nimport MenuBar from \"./components/parts/menu\";\nimport {\n  ButtonScreen,\n  CompWiresScreen,\n  KeyPadsScreen,\n  KnobsScreen,\n  MazesScreen,\n  MemoryScreen,\n  MorseScreen,\n  PasswordsScreen,\n  SeqWiresScreen,\n  SimonScreen,\n  WhoScreen,\n  WiresScreen\n} from \"./components/screens\";\n\nconst App: React.FC = () => {\n  return (\n    <BrowserRouter>\n      <React.Fragment>\n        <MenuBar />\n        <Switch>\n          <Route path=\"/button\">\n            <ButtonScreen />\n          </Route>\n          <Route path=\"/comp_wires\">\n            <CompWiresScreen />\n          </Route>\n          <Route path=\"/keypads\">\n            <KeyPadsScreen />\n          </Route>\n          <Route path=\"/knobs\">\n            <KnobsScreen />\n          </Route>\n          <Route path=\"/mazes\">\n            <MazesScreen />\n          </Route>\n          <Route path=\"/memory\">\n            <MemoryScreen />\n          </Route>\n          <Route path=\"/morse\">\n            <MorseScreen />\n          </Route>\n          <Route path=\"/passwords\">\n            <PasswordsScreen />\n          </Route>\n          <Route path=\"/seq_wires\">\n            <SeqWiresScreen />\n          </Route>\n          <Route path=\"/simon\">\n            <SimonScreen />\n          </Route>\n          <Route path=\"/who\">\n            <WhoScreen />\n          </Route>\n          <Route path=\"/wires\">\n            <WiresScreen />\n          </Route>\n          <Route path=\"/\">\n            <Home />\n          </Route>\n        </Switch>\n      </React.Fragment>\n    </BrowserRouter>\n  );\n};\n\nconst Home: React.FC = () => {\n  return <h2>Home</h2>;\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}